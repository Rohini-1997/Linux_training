What Is Meant By Orphan Process ?
	When a process forks and the parent process exits before the child,an inconsistency results in the kernel's task structures(where all process information is stored).The inconsistency is with regard to the PPID of the child -since the parent has died,the PPI  		now in the child's task structure is invalid.
	The kernel exit cleanup code corrects this inconsistency, setting the child's PPID to that of the init process (always having a PID of 1)in effect re-parenting the child. This is clever as the init process (now the parent) “cannot” die – init dies only when the system is shutting down. Hence the situation cannot recur.
	Since the child lost it's immediate parent, it is termed an orphaned process.
	
	
	
What is meant by Zombi Process ?
	When a process forks and the child process terminates, the child's internal task structure information is maintained within the kernel (even though the child is technically "dead").The reason that the kernel keeps the information is for the parent process to "fetch" it. 
	The parent process should (is expected to) fetch the child's status information by doing a wait() on for the child process. Only then does the kernel release the child's context information and the child is truly dead.
	Typically, the parent process would, after forking, wait for the child to terminate (directly orindirectly).If, however, the parent process does not bother to wait for it's child (for whatever reason),then, when the child dies, it's task information is still maintained in the kernel. The state of the child process now is neither completely dead nor alive - thus, it is called a zombie.
	
	
	
2)How to start a new process in shell? Explain with example how ls command works?
	Use system()library to execute command in shell.system()executes a command specified in command by calling /bin/sh-c command,and returns after the command has been completed.
	
	
	
3)Write a list of system calls used in process management with proper syntax?
	System calls in process:


getpid : To find the process id address
	getpid()
	getppid()
	
ps :The ps command shows the processes in the system or belonging to a user
	ps -eaf
	ps -l
	
system:

exec:

int execl (const char *path, const char *arg0, ..., (char *)0);
int execlp (const char *file, const char *arg0, ..., (char *)0);
int execle (const char *path, const char *arg0, ..., (char *)0, char *const envp[]);
int execv (const char *path, char *const argv[]); //basic syscall
int execvp (const char *file, char *const argv[]);
int execve (const char *path, char *const argv[], char *const envp[])

fork:
	fork();
waiting for a process-wait()
	pid_t wait (int *stat_val);
	pid_t waitpid (pid_t pid, int *status, int options);
	
	


    
	
